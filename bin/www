#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Kriv_test:server');
var http = require('http');
var events = require('events');


var udp = require('./udp.js');
var ws = require('./ws.js');

var db  = require('./db_engine');
var db_conn = db.connection();


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket.io
 */

var io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


var eventEmitter = new events.EventEmitter();

var emit_func = function emit_func(channel, str){
      io.emit(channel, str);
};

var ws_main_channel = function ws_main_channel(str){
    /*var t_str = JSON.parse(str);
    if(t_str.command != 'pong') {
        console.log('ws_main_channel func emit start ---------->');
        console.log(str);
        console.log('ws_main_channel func emit end   ---------->');
    }*/
    io.emit('main_channel', str);
};

var ws_info = function info(str){
    io.emit("iv_info",  str)
};
var sys_log = function(str){
    io.emit("sys_log",  str);
};
var mac_array = function mac_array(str){
    io.emit('mac_array', str);
};
var change_state = function change_state(str) {
    io.emit('change_state', str);
};
var ws_clients = function ws_clients(str) {
    io.emit('ws_clients',  str);
};


io.on('connection', function(socket){

    // console.log('User <<' + this.id + '>> connected!');
    //io.emit('shalabuhi', '{data:str}');


  /*  db_conn.query("SELECT * from sys_log limit 10", function(err, rows, fields){
        var db_array = [];
        rows.forEach(function(item){
            var db_obj = {};
            db_obj.zaslon_id = item.zaslon_id;
            db_obj.sys_name = item.sys_name;
            db_obj.level = item.level;
            db_obj.message = item.message;
            db_array.push(db_obj);
        });
        console.log("/////////////////////////////////////////////////////////////");
        console.log(db_array);
        console.log("/////////////////////////////////////////////////////////////");
    });*/

    socket.emit('on_connect', { 'data': 'data'});

    socket.on('ready', function(){
        console.log('Client ready!');
        db.data_for_chart('scale1_log', function(ret){
            //socket.emit('chart_data', {'data_1': ret});
            scales1 = ret;
        });
        db.data_for_chart('scale2_log', function(ret){
            //socket.emit('chart_data', {'data_2': ret});
            scales2 = ret;
        });
        socket.emit('chart_data', {'data_1': scales1, 'data_2': scales2});
    });

    /*socket.on('iv_status', function (data) {
        console.log("IV_STATUS: "+data);
        if(data == 'iv_run'){
            ws.event_1.emit('ev_1');    
        }else if(data == 'iv_stop'){
            ws.event_2.emit('ev_2');
        }else if(data == 'get_speed'){
            ws.event_3.emit('ev_3');
        }
    });*/
    socket.on('iv_status', function (data) {
        console.log("IV_STATUS: "+data);
        ws.event_command.emit("ev_command", data);
    });


    socket.on('disconnect', function(){
        try {
            console.log('User <<' + this.id + '>> disconnected!');
            socket.disconnect();
        }catch(err){
            console.log("Error: "+err);
        }

    });

    socket.on("get_clients", function(){
        console.log("===============");
        var send_clients = [];
        ws.clients.forEach(function(client){
           var obj = {};
            obj.mac = client.mac;
            obj.ip = client.ip;
            obj.version = client.version;
            obj.state = 'on';
            send_clients.push(obj);
        });
        socket.emit("ws_clients",  send_clients);
        console.log("[from www] ===SEND_CLIENTS===");
        console.log(send_clients);
        console.log("[from www] ==================");
    });
});


eventEmitter.addListener('main_channel', ws_main_channel);
eventEmitter.addListener('info', ws_info);
eventEmitter.addListener('mac_array', mac_array);
eventEmitter.addListener('sys_log', sys_log);
eventEmitter.addListener('change_state', change_state);
eventEmitter.addListener('ws_clients', ws_clients);

exports.eventEmitter = eventEmitter;