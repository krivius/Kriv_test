#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Kriv_test:server');
var http = require('http');
var events = require('events');
var dateFormat = require('dateformat');

var udp = require('./udp.js');
var ws = require('./ws.js');

var db  = require('./db_engine');
var db_conn = db.connection();
var CronJob = require('cron').CronJob;

var _ = require('underscore');

var report_mac_array = [];
var scale_1_arr = [],  scale_2_arr = [];




var job;
job = new CronJob({
    cronTime: '00 30 15 * * 1-7',
    onTick: function () {

        /*
         * Runs every weekday (Monday through Friday)
         * at 12:55:00
         */
         db_conn.query("SELECT DISTINCT zaslon_id FROM scale_log WHERE date >= (CURDATE() - INTERVAL 1 DAY)",  function(err, rows, fields){
             // var report_scales_obj = {};

             rows.forEach(function(item){
                report_mac_array.push(item.zaslon_id);
             });
             console.log(report_mac_array);


             db_conn.query('SELECT date FROM scale_log WHERE date >= (CURDATE() - INTERVAL 1 DAY) AND state = 0 AND zaslon_id = "'+report_mac_array[0]+'"',  function(err, rows, fields){
                 rows.forEach(function(item){
                     scale_1_arr.push(dateFormat(item.date, 'dd.mm.yy HH:MM:ss'));
                 });
             });
             db_conn.query('SELECT date FROM scale_log WHERE date >= (CURDATE() - INTERVAL 1 DAY) AND state = 0 AND zaslon_id = "'+report_mac_array[1]+'"',  function(err, rows, fields){
                 rows.forEach(function(item){
                     scale_2_arr.push(dateFormat(item.date, 'dd.mm.yy HH:MM:ss'));
                 });
             });



             setTimeout(function(){
                 // console.log(scale_1_arr, scale_2_arr);
                 var sheet_rows = 1;
                 if(scale_1_arr.length > scale_2_arr.length){
                     sheet_rows = scale_1_arr.length + 1;
                 }else {
                     sheet_rows = scale_2_arr.length + 1;
                 }


                 var excelbuilder = require('msexcel-builder');
                 // Create a new workbook file in current working-path
                 var sheet_name = 'report_' + dateFormat(new Date(), 'dd_mm_yy') + '___' + dateFormat(new Date(), 'HH_MM') + '.xlsx';
                 // var workbook = excelbuilder.createWorkbook('/var/www/html/zaslon/reports/', sheet_name);
                 var workbook = excelbuilder.createWorkbook('./', sheet_name);


                 var sheet1 = workbook.createSheet('sheet1', 2, sheet_rows);
                 sheet1.set(1, 1, 'Scale 1');
                 sheet1.set(2, 1, 'Scale 2');
                 for (var i = 0; i < scale_1_arr.length; i++) {
                     sheet1.set(1, i+2, scale_1_arr[i]);
                 }
                 for (var i = 0; i < scale_2_arr.length; i++) {
                     sheet1.set(1, i+2, scale_2_arr[i]);
                 }

                 workbook.save(function (ok) {
                     if (!ok)
                         workbook.cancel();
                     else
                         console.log('congratulations, your workbook created');
                 });

                 var nodemailer = require('nodemailer');

                 var transporter = nodemailer.createTransport({
                     host: "mx1.agroimpex.com",
                     secure: false,
                     port: 25,
                     tls: {
                         rejectUnauthorized: false
                     }
                 });

                 // setup e-mail data with unicode symbols
                 var mailOptions = {
                     from: '<mailbot@agroimpex.com>', // sender address
                     to: '<s.khaesh@agroimpex.com>', // list of receivers
                     cc: '<s.korolev@agroimpex.com>, <d.krivitskiy@agroimpex.com>', //copy
                     subject: 'Ежедневный отчет', // Subject line
                     text: 'Отчет сгенерирован автоматически', // plaintext body
                     attachments: [
                         {
                             // path: '/var/www/html/zaslon/reports/'+sheet_name
                             path: './'+sheet_name
                         }
                     ]
                 };

                 // send mail with defined transport object
                 transporter.sendMail(mailOptions, function (error, info) {
                     if (error) {
                         return console.log(error);
                     }
                     console.log('Message sent: ' + info.response);
                 });
             }, 2000)


         });


        console.log("CRON!!!!!!!!!!!!!!!!!!!");
    },
    start: false
});
job.start();


////////////////////////////////////////////////////////////////////////////






/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket.io
 */

var io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


var eventEmitter = new events.EventEmitter();

var emit_func = function emit_func(channel, str){
      io.emit(channel, str);
};

var ws_main_channel = function ws_main_channel(str){
    /*var t_str = JSON.parse(str);
    if(t_str.command != 'pong') {
        console.log('ws_main_channel func emit start ---------->');
        console.log(str);
        console.log('ws_main_channel func emit end   ---------->');
    }*/
    io.emit('main_channel', str);
};

var ws_info = function info(str){
    io.emit("iv_info",  str)
};
var sys_log = function(str){
    io.emit("sys_log",  str);
};
var mac_array = function mac_array(str){
    io.emit('mac_array', str);
};
var change_state = function change_state(str) {
    io.emit('change_state', str);
};
var ws_clients = function ws_clients(str) {
    io.emit('ws_clients',  str);
};


io.on('connection', function(socket){

    // console.log('User <<' + this.id + '>> connected!');
    //io.emit('shalabuhi', '{data:str}');
    socket.emit('on_connect', { 'data': 'data'});

    socket.on('ready', function(){
        console.log('Client ready!');
        db.data_for_chart('scale1_log', function(ret){
            //socket.emit('chart_data', {'data_1': ret});
            scales1 = ret;
        });
        db.data_for_chart('scale2_log', function(ret){
            //socket.emit('chart_data', {'data_2': ret});
            scales2 = ret;
        });
        socket.emit('chart_data', {'data_1': scales1, 'data_2': scales2});
    });

    /*socket.on('iv_status', function (data) {
        console.log("IV_STATUS: "+data);
        if(data == 'iv_run'){
            ws.event_1.emit('ev_1');    
        }else if(data == 'iv_stop'){
            ws.event_2.emit('ev_2');
        }else if(data == 'get_speed'){
            ws.event_3.emit('ev_3');
        }
    });*/
    socket.on('iv_status', function (data) {
        console.log("IV_STATUS: "+data);
        ws.event_command.emit("ev_command", data);
    });


    socket.on('disconnect', function(){
        try {
            console.log('User <<' + this.id + '>> disconnected!');
            socket.disconnect();
        }catch(err){
            console.log("Error: "+err);
        }

    });

    socket.on("get_clients", function(){
        console.log("===============");
        var send_clients = [];
        ws.clients.forEach(function(client){
           var obj = {};
            obj.mac = client.mac;
            obj.ip = client.ip;
            obj.version = client.version;
            obj.state = 'on';
            send_clients.push(obj);
        });
        socket.emit("ws_clients",  send_clients);
        console.log("[from www] ===SEND_CLIENTS===");
        console.log(send_clients);
        console.log("[from www] ==================");
    });



    socket.on("get_device_info",  function(mac){
        var sql =  'SELECT log.message as message, log.system as system, log.time as time, hw.ip as ip, hw.state as state, hw.last_login as last_login, hw.role as role ' +
            'FROM hw_log_table as log LEFT JOIN hw_table as hw ON log.mac = hw.mac WHERE log.mac="'+mac+'" ORDER BY log.id DESC LIMIT 100';
        var sql_2 = 'SELECT id, name FROM hw_roles';
        var info = {
            mac:mac,
            logs:[],
            roles:[]
        };
        db_conn.query(sql_2,  function(err, rows, fields){
            rows.forEach(function(role){
               var r_obj = {id:role.id, name:role.name};
                info.roles.push(r_obj);
            });
        });
        db_conn.query(sql,  function(err, rows, fields){

            rows.forEach(function(log){
                var tmp = {
                    time:dateFormat(log.time, 'dd.mm.yy HH:MM:ss'),
                    system: log.system,
                    message:log.message
                };

                info.logs.push(tmp);
                info.ip = log.ip;
                info.state = log.state;
                info.last_login = dateFormat(log.last_login, 'dd.mm.yy HH:MM:ss');
                info.curr_role = log.role;
            });

            // console.log(info.roles);
            socket.emit("show_device_controls", info);
        });
        // socket.emit("show_device_controls", info);
    });

   /* socket.on("refresh_logs",  function(mac){
        var sql = 'SELECT message, system, time FROM hw_log_table WHERE mac="'+mac+'" ORDER BY id DESC LIMIT 100';
        var logs = [];
        db_conn.query(sql, function(err, rows, fields){
            rows.forEach(function(log){
                var tmp = {
                    time:dateFormat(log.time, 'dd.mm.yy HH:MM:ss'),
                    system: log.system,
                    message:log.message
                };
                logs.push(tmp);
            });
            socket.emit("show_fresh_logs", logs);
        });

    });*/



    socket.on("save_device_role",  function(data){
       var sql = 'UPDATE hw_table SET role="'+data.role+'" WHERE mac="'+data.mac+'"';
        db_conn.query(sql);
    });


    socket.on("get_templates",  function(){
        var sql =  'SELECT id, name, template, current FROM templates';
        var t_list = [];
        db_conn.query(sql, function(err, rows, fields){
            rows.forEach(function(t){
                t_list.push({id:t.id, name:t.name, template:t.template, current:t.current});
            });
            socket.emit("template_list", t_list);
        });
    });

    socket.on("save_template",  function(data){
        db_conn.query('UPDATE templates SET current="0" WHERE 1=1');
        
        if(data.id == 'new'){
            db_conn.query('INSERT INTO templates SET name="'+data.name+'", template="'+data.template+'", current="1"');
        }else{
            db_conn.query('UPDATE templates SET template="'+data.template+'", current="1" WHERE id="'+data.id+'"');
        }

        var sql =  'SELECT id, name, template, current FROM templates';
        var t_list = [];
        db_conn.query(sql, function(err, rows, fields){
            rows.forEach(function(t){
                t_list.push({id:t.id, name:t.name, template:t.template, current:t.current});
            });
            socket.emit("template_list", t_list);
        });
    });


    socket.on("delete_template",  function(data){
       db_conn.query('DELETE FROM templates WHERE id="'+data.id+'"');
       db_conn.query('UPDATE templates SET current="0" WHERE 1=1');
        var min_id;
        db_conn.query("SELECT min(id) FROM templates",  function(err,  rows, fields){
            rows.forEach(function(q){
               min_id = q.id;
                db_conn.query('UPDATE templates SET current="1" WHERE id="'+min_id+'"');
            });
        });



        var sql =  'SELECT id, name, template, current FROM templates';
        var t_list = [];
        db_conn.query(sql, function(err, rows, fields){
            rows.forEach(function(t){
                t_list.push({id:t.id, name:t.name, template:t.template, current:t.current});
            });
            socket.emit("template_list", t_list);
        });
    });

    socket.on("get_scale_data", function(mac){
        console.log("MAC: "+mac);
        var sql = 'SELECT date, state FROM scale_log WHERE date >= (CURDATE() - INTERVAL 1 DAY) AND zaslon_id = "'+mac+'" ORDER BY id DESC';
        var scale_data = [];
        db_conn.query(sql, function(err, rows, fields){
            rows.forEach(function(item){
                scale_data.push({date:dateFormat(item.date, 'dd.mm.yy HH:MM:ss'), state:item.state});
            });
            console.log(scale_data);
            socket.emit("scale_state", {scale_data:scale_data, scale_mac:mac});
        });
    });


});


eventEmitter.addListener('main_channel', ws_main_channel);
eventEmitter.addListener('info', ws_info);
eventEmitter.addListener('mac_array', mac_array);
eventEmitter.addListener('sys_log', sys_log);
eventEmitter.addListener('change_state', change_state);
eventEmitter.addListener('ws_clients', ws_clients);

exports.eventEmitter = eventEmitter;